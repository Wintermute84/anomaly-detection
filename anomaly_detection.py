# -*- coding: utf-8 -*-
"""Anomaly Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19aKXYdTlYMPaZBwSmp0kGCuMa6bKNVjg
"""

import pandas as pd
import numpy as np
import pickle

df_ddos = pd.read_csv('Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv')
df_portscan = pd.read_csv("Friday-WorkingHours-Afternoon-PortScan.pcap_ISCX.csv")
df_bots = pd.read_csv("Friday-WorkingHours-Morning.pcap_ISCX.csv")
df_webattacks = pd.read_csv("Thursday-WorkingHours-Morning-WebAttacks.pcap_ISCX.csv")

df_portscan.columns = df_portscan.columns.str.strip()
df_ddos.columns = df_ddos.columns.str.strip()
df_bots.columns = df_bots.columns.str.strip()
df_webattacks.columns = df_webattacks.columns.str.strip()

required_columns = [
    'Total Length of Fwd Packets', 'Fwd Packet Length Max', 'Subflow Fwd Packets',
    'Fwd Packet Length Mean', 'Avg Bwd Segment Size', 'Fwd IAT Std',
    'Subflow Fwd Bytes', 'Bwd Packet Length Min', 'Fwd IAT Mean',
    'Destination Port', 'Avg Fwd Segment Size', 'Fwd IAT Total',
    'Fwd Header Length', 'Total Length of Bwd Packets',
    'Fwd Packet Length Std', 'Bwd Header Length', 'Label'
]

df_ddos_filtered = df_ddos[required_columns]
df_portscan_filtered = df_portscan[required_columns]
df_bots_filtered = df_bots[required_columns]
df_webattacks_filtered = df_webattacks[required_columns]

print(df_ddos_filtered.shape)
print(df_portscan_filtered.shape)
print(df_bots_filtered.shape)
print(df_webattacks_filtered.shape)

df_ddos_filtered = df_ddos_filtered.dropna()
df_portscan_filtered = df_portscan_filtered.dropna()
df_bots_filtered = df_bots_filtered.dropna()
df_webattacks_filtered = df_webattacks_filtered.dropna()

print(df_ddos_filtered.shape)
print(df_portscan_filtered.shape)
print(df_bots_filtered.shape)

df_combined = pd.concat([df_ddos_filtered, df_portscan_filtered, df_bots_filtered, df_webattacks_filtered], ignore_index=True)

X = df_combined.drop("Label", axis=1)
y = df_combined["Label"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(bootstrap=False,max_depth=None,max_features="log2",min_samples_leaf=2,min_samples_split=5,n_estimators=50,random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
from sklearn.metrics import accuracy_score
print("Accuracy:", accuracy_score(y_test, y_pred))

# Make predictions
y_pred = model.predict(X_test)

# Convert to DataFrame for easy viewing
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

with open('random_forest_model.pkl', 'wb') as f:
    pickle.dump(model, f)

print("Model saved successfully!")

# Display all rows
#pd.set_option('display.max_rows', None)  # Show all rows
#print(results)

#df_combined.shape

df_combined["Label"].unique()

